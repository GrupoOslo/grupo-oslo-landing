---
---

<div class="carousel md:py-40">
  <div class="carousel-track">
    <!-- Elementos del carrusel -->
    <div class="carousel-item">
      <img src="/logos/abranzon.png" alt="Abranzon" class="w-40" />
    </div>
    <div class="carousel-item">
      <img src="/logos/Aisenson ARQ-02.png" alt="Aisenson" class="w-40" />
    </div>
    <div class="carousel-item">
      <img src="/logos/Gradel.webp" alt="Gradel" class="w-40" />
    </div>
    <div class="carousel-item">
      <img src="/logos/pacifica.png" alt="Pacifica" class="w-40" />
    </div>
  </div>
</div>




<style>
/* Estilo del contenedor principal del carrusel */
.carousel {
  width: 100%; 
  overflow: hidden; 
  position: relative; 
}

/* Track del carrusel */
.carousel-track {
  display: flex; 
  align-items: center;
  width: max-content; 
  animation: scroll 80s linear infinite; 
}

/* Cada elemento del carrusel */
.carousel-item {
  flex: 0 0 auto; 
  width: 200px;
  padding: 10px; 
  box-sizing: border-box; 
}

/* Definir la animaci칩n continua del carrusel */
@keyframes scroll {
  0% {
    transform: translateX(0); /* Posici칩n inicial */
  }
  100% {
    transform: translateX(-100%); /* Desplazar todo el track hacia la izquierda */
  }
}



</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const carouselTrack = document.querySelector('.carousel-track') as HTMLElement;
  const items = document.querySelectorAll('.carousel-item');

  if (!carouselTrack || items.length === 0) return;

  // Copiar el contenido del track para crear un efecto continuo
  let contentWidth = 0;

  items.forEach((item) => {
    contentWidth += item.clientWidth; // Calcular el ancho total de los elementos
  });

  // Duplicar elementos hasta llenar el 치rea visible del carrusel
  while (carouselTrack.clientWidth < window.innerWidth * 2) {
    items.forEach((item) => {
      const clone = item.cloneNode(true);
      carouselTrack.appendChild(clone);
    });
  }

  // Ajustar el desplazamiento continuo del carrusel usando requestAnimationFrame
  let scrollAmount = 0;
  const scrollSpeed = 1; // Ajusta este valor para cambiar la velocidad del carrusel

  function scrollCarousel() {
    // Desplazar el track del carrusel
    scrollAmount -= scrollSpeed;
    carouselTrack.style.transform = `translateX(${scrollAmount}px)`;

    // Reiniciar la posici칩n cuando se alcanza el final del contenido visible
    if (Math.abs(scrollAmount) >= contentWidth) {
      scrollAmount = 0;
    }

    // Continuar el desplazamiento
    requestAnimationFrame(scrollCarousel);
  }

  // Iniciar el desplazamiento del carrusel
  scrollCarousel();
});

</script>

